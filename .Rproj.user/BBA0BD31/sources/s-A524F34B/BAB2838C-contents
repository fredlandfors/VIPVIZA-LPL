# Figure 2
check_packages(
  bioc_packages = c(),
  cran_packages = c("pls", "wesanderson", "ggrepel")
)

# Get data
figure_2_data <- merge(
  missData.sampleMetadata[c("ID", "ITC")],
  missData.dataMatrix,
  by = "ID"
)

Y <- figure_2_data["ITC"]
X <- figure_2_data[
  # Remove redundant or irrelevant variables
  !names(figure_2_data) %in%
    c("ITC", "ID", "XXL_VLDL_P", "XXL_VLDL_C", "XL_VLDL_P", "XL_VLDL_C",
                      "L_VLDL_P", "L_VLDL_C", "M_VLDL_P", "M_VLDL_C",
                      "S_VLDL_P", "S_VLDL_C", "XS_VLDL_P", "XS_VLDL_C",
                      "IDL_L", "IDL_C", "L_LDL_P", "L_LDL_C", 
                      "L_LDL_P", "L_LDL_C", "M_LDL_P", "M_LDL_C", 
                      "S_LDL_P", "S_LDL_C",  "XL_HDL_P", "XL_HDL_C", 
                      "XL_HDL_P", "XL_HDL_C", "L_HDL_P", "L_HDL_C", 
     "M_HDL_P", "M_HDL_C", "S_HDL_P", "S_HDL_C", "Serum_C", "VLDL_C",
     "Remnant_C", "LDL_C", "HDL_C", "HDL2_C", "HDL3_C", "EstC", "FreeC", "Serum_TG", "VLDL_TG",
     "LDL_TG", "HDL_TG", "TotPG", "TG_PG", "PC", "SM", "TotCho", "ApoA1",      
     "ApoB", "ApoB_ApoA1", "TotFA")]

# PCA of X
fig2_pca <- plot_pca(X, c = Y)
fig2_pca$pc1vs2_plot
fig2_pca$var_expl
fig2_pca$loadings_plot

# PLS Y ~ X
fig2_pls <- ropls::opls(
  X,
  Y$ITC,
  scaleC = "standard",
  algoC = "nipals"
)

fig2_pls2 <- ropls::opls(
  X,
  Y$ITC,
  scaleC = "standard",
  algoC = "nipals",
  log10L = TRUE
)

plot(fig2_pls, typeVc = "x-score")
plot(fig2_pls, typeVc = "correlation")
plot(fig2_pls, typeVc = "xy-weight")
plot(fig2_pls, typeVc = "summary")


scores2 <- as.data.frame(getScoreMN(fig2_pls))
weights2 <- as.data.frame(getWeightMN(fig2_pls))

loadings2 <- getLoadingMN(fig2_pls)
vip2 <- getVipVn(fig2_pls)

# Plot scores
pal1 <- wesanderson::wes_palette("Zissou1", 21, type = "continuous")

fig2_scores <- ggplot(scores2, aes(x = p1, y = p2)) +
  geom_hline(yintercept = 0, size = 0.5) +
  geom_vline(xintercept = 0, size = 0.5) +
  stat_ellipse(type = "norm", size = 0.5) +
  coord_fixed() +
  #geom_text(aes(label = rownames(scores2), colour = Y$ITC)) +
  geom_point(aes(colour = Y$ITC)) +
  scale_colour_gradientn(colours = pal1) +
  scale_x_continuous(
    limits = c(-25, 25)
  ) +
  scale_y_continuous(
    limits = c(-25, 25)
  ) +
  theme_classic() +
  theme()

fig2_scores

# Plot w*c coefficients
weights2$names <- rownames(weights2)

fig2_weights <- ggplot(weights2, aes(x = p1, y = p2, label = names)) +
  geom_hline(yintercept = 0, size = 0.5) +
  geom_vline(xintercept = 0, size = 0.5) +

  # stat_ellipse(type = "norm", size = 0.5) +
  coord_fixed() +

  geom_text(size = 3, check_overlap = FALSE, colour = "black") +

  scale_x_continuous(
    limits = c(-0.25, 0.25)
  ) +
  scale_y_continuous(
    limits = c(-0.25, 0.25)
  ) +
  theme_classic() +
  theme()

fig2_weights

plot_grid(fig2_scores + theme(legend.position = "none"), fig2_weights)

# mixomics
library(mixOmics)

# PLS
result <- pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
tune.pls <- perf(result, validation = 'loo', criterion = 'all', progressBar = TRUE)
plot(tune.pls$Q2.total)
abline(h = 0.0975)

# SPLS
ncomp = 10
result.spls <- spls(X, Y, ncomp = ncomp, keepX = c(rep(1, ncomp)), keepY = 1, mode = 'regression')
tune.spls <- perf(result.spls, validation = 'Mfold', folds = 10,
                  criterion = 'all', progressBar = TRUE)
tune.spls$Q2.total

plotVar(result.spls, comp = 1:2)
cim(result.spls, comp = 1:2)
#network(result.spls, comp  = 1:2)

ggplot(subset(figure_2_data, LDL_D < 24), aes(x = VLDL_D, y = LDL_D)) +
  geom_point(aes(colour = ITC))

summary(lm(ITC ~ VLDL_D*APOA5 + LDL_D, data = apo_dat5))

# library
library(rgl)

# This is to output a rgl plot in a rmarkdown document. Note that you must add webgl=TRUE, results='hide' in the chunck header
#library(knitr)
#knit_hooks$set(webgl = hook_webgl)

# Data: 
data <- subset(figure_2_data, LDL_D < 24)

# Plot
par(mar=c(0,0,0,0))
plot3d( 
  x = data$`VLDL_D`, y = data$`LDL_D`, z = data$`ITC`,
  type = 's', 
  radius = .1,
  xlab="VLDL_D", ylab="LDL_D", zlab="ITC")

writeWebGL( filename="HtmlWidget/3dscatter.html" ,  width=600, height=600)

# APO:S+ ANG:S

figure_3_data <- sampleMetadata[
  c("ITC", "ANGPTL3", "ANGPTL4", "ANGPTL8", "APOC1", "APOC2", "APOC3", "APOA5")]

figure_3_data <- na.omit(figure_3_data)

X_3 <- as.matrix(figure_3_data[, -1])
Y_3 <- figure_3_data[, 1]

library(L0Learn)
cvfit <- L0Learn.cvfit(
  X_3, Y_3,
  nFolds = 5, seed = 1, penalty = "L0L2", nGamma = 5, gammaMin = 0.0001, gammaMax = 0.1, maxSuppSize = 5
)
lapply(cvfit$cvMeans, min)
plot(cvfit, gamma=cvfit$fit$gamma[4])


fit <- L0Learn.fit(X_3, Y_3, penalty = "L0", maxSuppSize = 5)
print(fit)
coef(fit, lambda = 0.3335442, gamma = 0)
plot(fit, lambda = 0.3335442, gamma = 0, showLines = TRUE)

summary(lm(ITC ~ APOC1 + ANGPTL8 + ANGPTL4 + ANGPTL3, data = figure_3_data))

ropls::opls()

spls3 <- pls(X_3, Y_3, ncomp = 3)
tune_pls3 <- perf(spls3, validation = 'loo', criterion = 'all', progressBar = TRUE)
plot(tune_pls3$Q2.total)
abline(h = 0.0975)

plotVar(spls3)


fig3_pls <- ropls::opls(
  X_3,
  Y_3,
  scaleC = "standard",
  algoC = "nipals"
)

getLoadingMN(fig3_pls)
getVipVn(fig3_pls)

# lm
summary(lm(ITC ~ ANGPTL8 + age_3 + sex_3, data = figure_3_data))

